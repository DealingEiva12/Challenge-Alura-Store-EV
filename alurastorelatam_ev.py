# -*- coding: utf-8 -*-
"""AluraStoreLatam_EV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S7ufHQ8BDN2kGZQa5ZU8IC32GY5FG1zA

### Importación de datos
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

pd.set_option('display.float_format', '{:,.2f}'.format)

url = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_1%20.csv"
url2 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_2.csv"
url3 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_3.csv"
url4 = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_4.csv"


tienda1 = pd.read_csv(url)
tienda2 = pd.read_csv(url2)
tienda3 = pd.read_csv(url3)
tienda4 = pd.read_csv(url4)

# Add 'Tienda' column to each dataframe
tienda1['Tienda'] = 'Tienda 1'
tienda2['Tienda'] = 'Tienda 2'
tienda3['Tienda'] = 'Tienda 3'
tienda4['Tienda'] = 'Tienda 4'


# Unir todos los DataFrames en uno solo
df_total = pd.concat([tienda1, tienda2, tienda3, tienda4], ignore_index=True)

# Ver las primeras filas
display(df_total.head())

"""#1. Análisis de facturación


"""

# Calcular ingresos totales por tienda
ingresos = {
    "Tienda 1": tienda1["Precio"].sum(),
    "Tienda 2": tienda2["Precio"].sum(),
    "Tienda 3": tienda3["Precio"].sum(),
    "Tienda 4": tienda4["Precio"].sum()
}

# Mostrar resultados
for tienda, ingreso in ingresos.items():
    print(f"{tienda}: ${ingreso:,.2f}")

"""# 2. Ventas por categoría"""

# Combinar todos los datos en un solo DataFrame
datos_combinados = pd.concat([tienda1, tienda2, tienda3, tienda4], ignore_index=True)
print("Informacion cargada con exito!")

"""Categorias mas y menos vendidas"""

# Agrupar por categoría y sumar la cantidad vendida
categorias_mas_vendidas = datos_combinados.groupby("Categoría del Producto")["Precio"].sum().reset_index()

# Renombrar la columna 'Precio' por 'cantidad'
categorias_mas_vendidas = categorias_mas_vendidas.rename(columns={"Precio": "Cantidad"})

# Ordenar las categorías por cantidad vendida (de mayor a menor)
categorias_mas_vendidas = categorias_mas_vendidas.sort_values(by="Cantidad", ascending=False)

# Mostrar las categorías más vendidas
print(categorias_mas_vendidas)

"""# 3. Calificación promedio de la tienda

"""

# Calcular promedio por tienda usando el DataFrame combinado
promedio_calificaciones = (
    df_total
    .groupby("Tienda", as_index=False)["Calificación"]
    .mean()
    .rename(columns={"Calificación": "Calificación_promedio"})
    .sort_values(by="Calificación_promedio", ascending=False)
)

print("Promedio de calificaciones por tienda:")
print(promedio_calificaciones)

"""# 4. Productos más y menos vendidos"""

productos_mas_vendidos = (
    df_total
      .groupby('Producto')
      .agg(Cantidad=('Precio', 'sum'))       # agregamos y nombramos la salida
      .sort_values('Cantidad', ascending=False)
      .reset_index()
)

print(productos_mas_vendidos)

"""Top 10 Productos mas vendidos"""

# Mostrar las 10 primeras categorías más vendidas
top_10_productos = productos_mas_vendidos.head(10)

plt.figure(figsize=(12, 6))
sns.barplot(x='Cantidad', y='Producto', data=top_10_productos, palette='viridis')
plt.title('Top 10 Productos Más Vendidos')
plt.xlabel('Cantidad (en pesos colombianos COP)')
plt.ylabel('Producto')
plt.show()

"""Top 10 Productos menos vendidos"""

# Seleccionar los 10 productos menos vendidos
bottom_10_productos = productos_mas_vendidos.sort_values(
    by='Cantidad', ascending=True
).head(10)

# Generar una paleta de colores con Seaborn
colors = sns.color_palette("plasma", len(bottom_10_productos))

# Crear gráfico circular
plt.figure(figsize=(8, 8))
plt.pie(
    bottom_10_productos['Cantidad'],
    labels=bottom_10_productos['Producto'],
    autopct='%1.1f%%',
    startangle=140,
    colors=colors
)
plt.title('Top 10 Productos Menos Vendidos', fontsize=14)
plt.axis('equal')  # Mantener forma circular
plt.show()

"""# 5. Envío promedio por tienda"""

# Calcular el promedio del costo de envío (skipna=True implícito)
promedio_costo_envio = datos_combinados["Costo de envío"].mean()

print(f"El costo promedio del envío es: {promedio_costo_envio:.2f} pesos colombianos COP")

from tabulate import tabulate

# Use the already combined dataframe df_total
promedio_envio_por_tienda = (
    df_total
      .groupby("Tienda")["Costo de envío"]
      .mean()
)

promedio_envio_df = promedio_envio_por_tienda.reset_index(name="Promedio de Envio")

# tablefmt puede ser "psql", "grid", "fancy_grid", etc.
print(tabulate(promedio_envio_df,
               headers="keys",
               tablefmt="psql",
               showindex=False))

"""Tabla final"""

df_total

# Reemplaza df por tu dataframe principal
tabla_resumen = df_total.groupby("Tienda").agg({
    "Precio": "sum",
    "Categoría del Producto": [('Categoria_mas_vendida', lambda x: x.value_counts().index[0]),
                               ('Categoria_menos_vendida', lambda x: x.value_counts().index[-1])],
    "Calificación": "mean",
    "Producto": [('Producto_mas_vendido', lambda x: x.value_counts().index[0]),
                 ('Producto_menos_vendido', lambda x: x.value_counts().index[-1])],
    "Costo de envío": "mean"
}).reset_index()

# Flatten the multi-level columns
tabla_resumen.columns = ['_'.join(col).strip('_') for col in tabla_resumen.columns.values]

# Redondear cifras si es necesario
tabla_resumen["Calificación_mean"] = tabla_resumen["Calificación_mean"].round(2)
tabla_resumen["Costo de envío_mean"] = tabla_resumen["Costo de envío_mean"].round(2)

tabla_resumen

"""# **Analisis completo de la informacion**

**Facturacion total de las tiendas**

Con base en los datos analizados, la Tienda 1 se posiciona como la mejor en términos de ingresos, alcanzando un total de 1150880400 cifra que la sitúa por encima de las demás. En contraste, la Tienda 4 registra el menor nivel de ventas, con ingresos de 1 038 375 700, lo que refleja su menor participación en el total generado durante el periodo evaluado.
"""

# Mostrar resultados
for tienda, ingreso in ingresos.items():
    print(f"{tienda}: ${ingreso:,.2f}")

"""Esta grafica presenta las categorias mas y menos vendidas de las tiendas"""

# Configuración del estilo
sns.set(style="whitegrid")

# Crear la gráfica de barras
plt.figure(figsize=(10,6))
sns.barplot(
    data=categorias_mas_vendidas,
    x="Categoría del Producto",
    y="Cantidad",
    palette="viridis"
)

# Personalizar etiquetas y título
plt.title("Ingresos por Categoría de Producto", fontsize=16)
plt.xlabel("Categoría", fontsize=12)
plt.ylabel("Ingresos Totales", fontsize=12)
plt.xticks(rotation=45, ha="right")

# Mostrar la gráfica
plt.tight_layout()
plt.show()

"""**Evaluacion Promedio por tienda**

Las evaluaciones promedio presentan lo mas importante de este analisis, con un ranking de 1-5, se presenta la calificacion promedio de cada tienda
"""

print("Promedio de calificaciones por tienda:")
print(promedio_calificaciones)

"""Las siguientes 2 graficas presentan cuales son los productos co nmas y menos ventas entre las 4 tiendas, presentando los 10 productos mas vendidos y los 10 menos vendidos."""

# Mostrar las 10 primeras categorías más vendidas
top_10_productos = productos_mas_vendidos.head(10)

plt.figure(figsize=(12, 6))
sns.barplot(x='Cantidad', y='Producto', data=top_10_productos, palette='viridis')
plt.title('Top 10 Productos Más Vendidos')
plt.xlabel('Cantidad (en pesos colombianos COP)')
plt.ylabel('Producto')
plt.show()

# Seleccionar los 10 productos menos vendidos
bottom_10_productos = productos_mas_vendidos.sort_values(
    by='Cantidad', ascending=True
).head(10)

# Generar una paleta de colores con Seaborn
colors = sns.color_palette("plasma", len(bottom_10_productos))

# Crear gráfico circular
plt.figure(figsize=(8, 8))
plt.pie(
    bottom_10_productos['Cantidad'],
    labels=bottom_10_productos['Producto'],
    autopct='%1.1f%%',
    startangle=140,
    colors=colors
)
plt.title('Top 10 Productos Menos Vendidos', fontsize=14)
plt.axis('equal')  # Mantener forma circular
plt.show()

"""A continuacion, se presenta el promedio de costo de envio de cada una de las tiendas, demostrando que la tienda con un promedio menor es la Tienda 4 y con mayor promedio es la Tienda 1"""

# Generate a bar plot for average shipping cost per store
plt.figure(figsize=(8, 5))
sns.barplot(x='Tienda', y='Promedio de Envio', data=promedio_envio_df, palette='viridis')
plt.title('Promedio de Costo de Envío por Tienda')
plt.xlabel('Tienda')
plt.ylabel('Promedio de Costo de Envío (COP)')
plt.show()

"""# **Conclusion**"""